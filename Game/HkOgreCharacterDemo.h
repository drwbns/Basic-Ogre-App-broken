/*
-----------------------------------------------------------------------------
Filename:    HkOgreCharacterDemo.h
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC10 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/
#ifndef __HkOgreCharacterDemo_h_
#define __HkOgreCharacterDemo_h_

#include "GameEngine.h"

#include "BaseApplication.h"

using namespace Forests;
using namespace Ogre;



#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#include "../res/resource.h"
#endif

class HkOgreCharacterDemo : public GameEngine::BaseApplication
{
public:
    HkOgreCharacterDemo(void);
    ~HkOgreCharacterDemo(void);
	
	void getTerrainImage(bool flipX, bool flipY, Ogre::Image& img);

	hkpBvTreeShape* loadBVTreeShape(std::string & filename);
	void saveBVTreeShape(const char *filename, hkpBvTreeShape & bvtreeShape);

	void defineTerrain(long x, long y);
	void initBlendMaps(Ogre::Terrain* terrain);
	void configureTerrainDefaults(Ogre::Light* light);
	void createScene(bool createLevel);
	void createVehicle();
	bool frameRenderingQueued(const Ogre::FrameEvent& evt);
	bool keyPressed( const OIS::KeyEvent &evt );
	bool keyReleased( const OIS::KeyEvent &evt );
	bool mouseMoved( const OIS::MouseEvent &evt );
	bool mousePressed( const OIS::MouseEvent &evt, OIS::MouseButtonID id );

	
private:

	GameEngine::IPlayer * mPlayer;

	// VEHICLE DATA
	GameEngine::IVehicle*		mVehicle;

	Ogre::TerrainGlobalOptions* mTerrainGlobals;
	Ogre::TerrainGroup* mTerrainGroup;
	bool mTerrainsImported;
	Ogre::SceneNode * manNode; // collisionmesh node
	//std::vector<IControllable*> controllables; // Old method, use Controllable::Factory

	// PagedGeo
	//Pointers to PagedGeometry class instances:
	PagedGeometry *trees;
	TreeLoader3D *treeLoader;
	//GameEngine::BaseApplication * mBaseApp;

	GameEngine::IPlayer * getPlayer() { return mPlayer; }

};

#endif
